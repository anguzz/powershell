# Relaunch in 64-bit if running in 32-bit (important for Intune/Win64)
if ($env:PROCESSOR_ARCHITEW6432 -or $PSHOME -like '*SysWOW64*') {
    try {
        & "$env:WINDIR\SysNative\WindowsPowerShell\v1.0\powershell.exe" -NoProfile -ExecutionPolicy Bypass -File "$PSCommandPath"
        exit $LASTEXITCODE
    }
    catch {
        # This block will run if the 64-bit relaunch fails
        Write-Output "Failed to relaunch in 64-bit PowerShell. Error: $_"
        exit 1
    }
}

# --- Logging Setup ---
$LogDir = "C:\ProgramData\IntuneScripts\Logs"
if (-not (Test-Path $LogDir)) {
    New-Item -Path $LogDir -ItemType Directory -Force | Out-Null
}
$LogFile = Join-Path -Path $LogDir -ChildPath "EnableCertPaddingCheck_Remediation_$(Get-Date -Format 'yyyyMMdd-HHmmss').log"
Start-Transcript -Path $LogFile -Force
# ---------------------

Write-Host "Starting script to configure EnableCertPaddingCheck registry value."
Write-Host "Running in 64-bit mode."

$Name  = "EnableCertPaddingCheck"
$Value = 1 #  DWORD value

$paths = @(
    "HKLM:\Software\Microsoft\Cryptography\Wintrust\Config",
    "HKLM:\Software\Wow6432Node\Microsoft\Cryptography\Wintrust\Config"
)

foreach ($path in $paths) {
    Write-Host "Processing path: $path"
    try {
        # Ensure the registry key exists before trying to set a value in it
        if (-not (Test-Path $path)) {
            Write-Host "Path not found. Creating key: $path"
            New-Item -Path $path -Force | Out-Null
        }

        $currentValue = (Get-ItemProperty -Path $path -Name $Name -ErrorAction SilentlyContinue).$Name

        if ($null -eq $currentValue) {
            # Value does not exist, create it
            New-ItemProperty -Path $path -Name $Name -PropertyType DWord -Value $Value -Force | Out-Null
            Write-Host "SUCCESS: Created registry value '$Name' with value '$Value' at '$path'."
        }
        elseif ($currentValue -ne $Value) {
            # Value exists but is incorrect, update it
            Set-ItemProperty -Path $path -Name $Name -Value $Value -Force | Out-Null
            Write-Host "SUCCESS: Updated registry value '$Name' to '$Value' at '$path'. (Old value was '$currentValue')."
        }
        else {
            # Value is already correct
            Write-Host "INFO: Value '$Name' at '$path' is already correctly set to '$Value'."
        }
    }
    catch {
        # Catch any other errors during the process
        Write-Error "ERROR: Failed to process path '$path'. Details: $_"
    }
}

Write-Host "Script finished."
Stop-Transcript