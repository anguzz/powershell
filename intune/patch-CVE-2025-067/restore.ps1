$TargetDllFullPath = ""#add the target libcurl dll file here 
$backupDir = "C:\Temp\backuplibcurl" 


Write-Host "Starting DLL restore process for: $TargetDllFullPath" -ForegroundColor Yellow
Write-Host "------------------------------------------------------------------------------------------"

Write-Host "Step 1: Validating Target Path and Backup..." -ForegroundColor Cyan
$TargetDllInfo = Get-Item -Path $TargetDllFullPath -ErrorAction SilentlyContinue # Get info if it exists
$OriginalTargetDllName = $null
$TargetDllDirectory = $null

if ($TargetDllInfo) {
    $OriginalTargetDllName = $TargetDllInfo.Name
    $TargetDllDirectory = $TargetDllInfo.DirectoryName
} else {
    try {
        $OriginalTargetDllName = Split-Path -Path $TargetDllFullPath -Leaf
        $TargetDllDirectory = Split-Path -Path $TargetDllFullPath -Parent
        if (-not (Test-Path $TargetDllDirectory -PathType Container)) {
            Write-Error "The parent directory for the target DLL does not exist: $TargetDllDirectory"
            exit 1
        }
        Write-Host "Target DLL '$OriginalTargetDllName' does not currently exist at '$TargetDllDirectory'. Will attempt to restore."
    } catch {
        Write-Error "Invalid TargetDllFullPath provided: $TargetDllFullPath. Error: $($_.Exception.Message)"
        exit 1
    }
}

if ([string]::IsNullOrEmpty($OriginalTargetDllName) -or [string]::IsNullOrEmpty($TargetDllDirectory)) {
    Write-Error "Could not determine original DLL name or target directory from path: $TargetDllFullPath"
    exit 1
}

$backupFile = Join-Path $backupDir "$($OriginalTargetDllName).bak"

Write-Host "Original DLL Name: $OriginalTargetDllName"
Write-Host "Target Directory: $TargetDllDirectory"
Write-Host "Expected Backup File: $backupFile"

if (-not (Test-Path $backupFile -PathType Leaf)) {
    Write-Error "Backup file not found at '$backupFile'. Cannot restore."
    Write-Error "Ensure the updater script ran successfully and created a backup, or that the backup file is manually in place."
    exit 1
} else {
    Write-Host "Backup file found: $backupFile"
}
Write-Host "------------------------------------------------------------------------------------------"

Write-Host "Step 2: Attempting to Stop Processes (if any are using the current DLL)..." -ForegroundColor Cyan
$processesUsingDll = @()
if (Test-Path $TargetDllFullPath -PathType Leaf) {
    try {
        $openfiles = Get-Process -ErrorAction SilentlyContinue | ForEach-Object {
            $process = $_
            try {
                $process.Modules | Where-Object {$_.FileName -eq $TargetDllFullPath} | ForEach-Object {
                    [PSCustomObject]@{
                        ProcessName = $process.ProcessName
                        Id          = $process.Id
                        Path        = $process.Path 
                    }
                }
            } catch {
            }
        } | Select-Object -Unique

        if ($openfiles.Count -gt 0) {
            $processesUsingDll = $openfiles
        }
    } catch {
        Write-Warning "An error occurred while trying to determine processes using the DLL: $($_.Exception.Message). Manual check might be needed."
    }

    if ($processesUsingDll.Count -gt 0) {
        Write-Warning "The following processes appear to be using '$OriginalTargetDllName' at '$TargetDllFullPath' and an attempt will be made to stop them:"
        $processesUsingDll | ForEach-Object { Write-Warning "- $($_.ProcessName) (PID: $($_.Id)) Path: $($_.Path)" }

        foreach ($processInfo in $processesUsingDll) {
            Write-Host "Attempting to stop process: $($processInfo.ProcessName) (PID: $($processInfo.Id))"
            Stop-Process -Id $processInfo.Id -Force -ErrorAction SilentlyContinue
            Start-Sleep -Seconds 2
            if (Get-Process -Id $processInfo.Id -ErrorAction SilentlyContinue) {
                Write-Warning "Failed to stop process $($processInfo.ProcessName) (PID: $($processInfo.Id)). Restoration may fail if the file is locked."
            } else {
                Write-Host "Process $($processInfo.ProcessName) stopped."
            }
        }
    } else {
        Write-Host "No running processes found actively using '$OriginalTargetDllName' at the specified path (or enumeration failed/access denied)."
    }
} else {
    Write-Host "Target DLL '$TargetDllFullPath' does not currently exist. Skipping process stop."
}
Write-Host "------------------------------------------------------------------------------------------"



Write-Host "Step 3: Restoring DLL from Backup..." -ForegroundColor Cyan

if (Test-Path $TargetDllFullPath -PathType Leaf) {
    Write-Host "Attempting to remove current DLL at '$TargetDllFullPath'..."
    try {
        Remove-Item $TargetDllFullPath -Force -ErrorAction Stop
        Write-Host "Removed current DLL from '$TargetDllFullPath'."
    } catch {
        Write-Warning "Failed to remove current DLL at '$TargetDllFullPath'. Error: $($_.Exception.Message). Will attempt to overwrite."
    }
} else {
    Write-Host "No DLL currently at '$TargetDllFullPath'. Proceeding to copy backup."
}

Write-Host "Attempting to restore '$backupFile' to '$TargetDllFullPath'..."
try {
    Copy-Item -Path $backupFile -Destination $TargetDllFullPath -Force -ErrorAction Stop
    Write-Host "Original DLL '$OriginalTargetDllName' successfully restored to '$TargetDllFullPath' from backup." -ForegroundColor Green
    Unblock-File -Path $TargetDllFullPath -ErrorAction SilentlyContinue
} catch {
    Write-Error "Failed to restore DLL from backup. Error: $($_.Exception.Message)"
    Write-Error "Please check file permissions and ensure no process is locking the target location."
    exit 1
}

if (Test-Path $TargetDllFullPath -PathType Leaf) {
    Write-Host "Verification: Restored DLL found at '$TargetDllFullPath'."
} else {
    Write-Error "Verification FAILED: Restored DLL NOT found at '$TargetDllFullPath' after restore attempt."
}
Write-Host "------------------------------------------------------------------------------------------"

Write-Host "DLL restoration process completed." -ForegroundColor Green
Write-Warning "It is recommended to test the application that uses this DLL thoroughly."